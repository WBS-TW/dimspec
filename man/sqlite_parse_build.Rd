% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_comm.R
\name{sqlite_parse_build}
\alias{sqlite_parse_build}
\title{Parse SQL build statements}
\usage{
example_file <- "./config/sql_nodes/reference.sql"
if (file.exists(example_file)) {
  build_commands <- readr::read_file(example_file)
  sqlite_parse_build(build_commands)
}
}
\arguments{
\item{sql_statements}{CHR scalar of SQL build statements from an SQL file.}

\item{magicsplit}{CHR scalar regex indicating some "magic" split point SQL
comment to simplify the identification of discrete commands; will be used
to split results (optional but highly recommended)}

\item{header}{CHR scalar regex indicating the format of header comments SQL
comment to remove (optional)}

\item{section}{CHR scalar regex indicating the format of section comments SQL
comment to remove (optional)}
}
\value{
LIST of parsed complete build commands as CHR vectors containing each
  line.
}
\description{
Reading SQL files directly into R can be problematic. This function is
primarily called in [create_fallback_build]. To support multiline,
human-readable SQL statements, `sql_statements` must be of length 1.
}
\details{
All arguments `magicsplit`, `header`, and `section` provide flexibility in
the comment structure of the SQL file and accept regex for character matching
purposes.
}
