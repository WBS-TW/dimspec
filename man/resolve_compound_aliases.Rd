% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NIST_import_routines.R
\name{resolve_compound_aliases}
\alias{resolve_compound_aliases}
\title{Resolve compound aliases provided as part of the import routine}
\usage{
resolve_compound_aliases(
  obj,
  compound_id,
  compounds_in = "compounddata",
  compound_alias_table = "compound_aliases",
  norm_alias_table = "norm_analyte_alias_references",
  norm_alias_name_column = "name",
  headers_to_examine = c("ADDITIONAL", "NAME"),
  split_multiples_by = ";",
  identify_property_by = ":",
  out_file = "unknown_compound_aliases.csv",
  db_conn = con,
  log_ns = "db",
  ...
)
}
\arguments{
\item{obj}{LIST object containing data formatted from the import generator}

\item{compound_id}{INT scalar of the compound_id to use for these aliases}

\item{compounds_in}{CHR scalar name in `obj` holding compound data (default:
"compounddata")}

\item{norm_alias_table}{CHR scalar name of the table normalizing analyte
alias references (default: "norm_analyte_alias_references")}

\item{norm_alias_name_column}{CHR scalar name of the column in
`norm_alias_table` containing the human-readable expression of alias type
classes (default: "name")}

\item{...}{Named list of any additional aliases to tack on that are not found
in the import object, with names matching those found in
`norm_alias_table`.`norm_alias_name_column`}
}
\value{
None, though if unclassifiable aliases (those with alias types not
  present in the normalization table) are found, they will be written to a
  file (`out_file`) in the project directory
}
\description{
Call this to add any aliases for a given `compound_id` that may not be
present in the database. Only those identifiable as part of the accepted
types defined in `norm_alias_table` will be mapped. If multiple items are
provided in the import NAME, ADDITIONAL, or other items matching names in
`norm_alias_table`.name column, indicate the split character in
`split_multiples_by` and any separator between names and values (e.g.
CLASS:example) in `identify_property_by`.
}
\note{
Existing aliases, and aliases for which there is no `compound_id` will
  be ignored and not imported.

Compound IDs provided in `compound_id` must be present in the compounds
  table and must be provided explicitly on a 1:1 basis for each element
  extracted from `obj`. If you provide an import object with 10 components
  for compound data, you must provide tying `compound_id` identifiers for
  each. If all extracted components represent aliases for the same
  `compound_id` then one may be provided.

Alias types (e.g. "InChI" are case insensitive)
}
