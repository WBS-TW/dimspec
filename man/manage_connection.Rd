% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_comm.R
\name{manage_connection}
\alias{manage_connection}
\title{Check for, and optionally remove, a database connection object}
\usage{
manage_connection("test.sqlite", conn_name = "test_con")
}
\arguments{
\item{db}{CHR scalar name of the database to check, defaults to the name
supplied in config/env.R (default: session variable DB_NAME)}

\item{drv_pack}{CHR scalar of the package used to connect to this database
(default: session variable DB_DRIVER)}

\item{conn_class}{CHR vector of connection object classes to check against.
Note this may depend heavily on connection packages and must be present in
the class names of the driver used. (default session variable DB_CLASS)}

\item{conn_name}{CHR scalar of the R environment object name to use for this
connection (default: "con")}

\item{is_local}{LGL scalar indicating whether or not the referenced database
is a local file, if not it will be treated as though it is either a DSN or
a database name on your host server, connecting as otherwise defined}

\item{rm_objects}{LGL scalar indicating whether or not to remove objects
identifiably connected to the database from the current environment. This
is particularly useful if there are outstanding connections that need to be
closed (default: TRUE)}

\item{reconnect}{LGL scalar indicating whether or not to connect if a
connection does not exist; if both this and `disconnect` are true, it will
first be disconnected before reconnecting. (default: TRUE)}

\item{disconnect}{LGL scalar indicating whether or not to terminate and
remove the connection from the current global environment (default: TRUE)}

\item{log_ns}{CHR scalar of the namespace (if any) to use for logging}

\item{.environ}{environment within which to place this connection object}

\item{...}{named list of any other connection parameters required for your
database driver (e.g. postgres username/password)}
}
\value{
None
}
\description{
This function seeks to abstract connection management objects to a degree. It
seeks to streamline the process of connecting and disconnecting existing
connections as defined by function parameters. This release has not been
tested extensively with drivers other than SQLite.
}
\note{
If you want to disconnect everything but retain tibble pointers to your
  data source as tibbles in this session, use [close_up_shop] instead.

For more complicated setups, it may be easier to use this function by
  storing parameters in a list and calling with [base::do.call()]
}
