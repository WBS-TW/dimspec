% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_comm.R
\name{create_fallback_build}
\alias{create_fallback_build}
\title{Create an SQL file for use without the SQLite CLI}
\usage{
create_fallback_build(build_file = file.path("config", "build.sql"))
}
\arguments{
\item{build_file}{CHR scalar name SQL build file to use. The default, NULL,
will use the environment variable "DB_BUILD_FILE" if it is available.}

\item{populate}{LGL scalar of whether to populate data (default: TRUE)}

\item{populate_with}{CHR scalar name SQL population file to use. The default,
NULL, will use the environment variable "DB_DATA" if it is available.}

\item{driver}{CHR scalar of the database driver class to use to correctly
interpolate SQL commands (default: "SQLite")}

\item{comments}{CHR scalar regex identifying SQLite comments}

\item{out_file}{CHR scalar of the output file name and destination. The
default, NULL, will write to a file named similarly to `build_file`
suffixed with "_full".}
}
\value{
None: a file will be written at `out_file` with the output.
}
\description{
For cases where the SQLite Command Line Interface is not available, dot
commands used to simplify the database build pipeline are not usable. Call
this function to create a self-contained SQL build file that can be used in
[build_db] to build the database. The self-contained file will include all
"CREATE" and "INSERT" statements necessary by parsing lines including ".read"
and ".import" commands and directly reading referenced files.
}
