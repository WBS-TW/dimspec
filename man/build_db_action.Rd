% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_generator.R
\name{build_db_action}
\alias{build_db_action}
\title{Build an escaped SQL query}
\usage{
build_db_action("insert", "table", values = list(col1 = "a", col2 = 2,
  col3 = "describe"), execute = FALSE) build_db_action("insert", "table",
  values = list(col1 = "a", col2 = 2, col3 = "describe"))
  
  build_db_action("get_id", "table", match_criteria = list(id = 2))
  
  build_db_action("delete", "table", match_criteria = list(id = 2))
  
  build_db_action("select", "table", columns = c("col1", "col2", "col3"),
  match_criteria = list(id = 2)) build_db_action("select", "table",
  match_criteria = list(sample_name = "sample 123"))
  
  build_db_action("select", "table", match_criteria = list(sample_name =
  list(value = "sample 123", exclude = TRUE)) build_db_action("select",
  "table", match_criteria = list(sample_name = "sample 123",
  sample_contributor = "Smith"), and_or = "AND", limit = 5)
}
\arguments{
\item{action}{CHR scalar, of one "INSERT", "UPDATE", "SELECT", "GET_ID", or
"DELETE"}

\item{table_name}{CHR scalar of the table name to which this query applies}

\item{column_names}{CHR vector of column names to include (default NULL)}

\item{values}{LIST of CHR vectors with values to INSERT or UPDATE (default
NULL)}

\item{match_criteria}{LIST of matching criteria with names matching columns
against which to apply. In the simplest case, a direct value is given to
the name (e.g. `list(last_name = "Smith")`) for single matches. All match
criteria must be their own list item. Values can also be provided as a
nested list for more complicated WHERE clauses with names `values`,
`exclude`, and `like` that will be recognized. `values` should be the
actual search criteria, and if a vector of length greater than one is
specified, the WHERE clause becomes an IN clause. `exclude` (LGL scalar)
determines whether to apply the NOT operator. `like` (LGL scalar)
determines whether this is an equality, list, or similarity. To reverse the
example above by issuing a NOT statement, use `list(last_name = list(values
= "Smith", exclude = TRUE))`, or to look for all records LIKE (or NOT LIKE)
"Smith", set this as `list(last_name = list(values = "Smith", exclude =
FALSE, like = TRUE))`}

\item{case_sensitive}{LGL scalar of whether to match on a case sensitive
basis (the default TRUE searches for values as-provided) or whether to
coerce value matches by upper, lower, sentence, and title case matches}

\item{and_or}{LGL scalar of whether to use "AND" or "OR" for multiple
criteria, which will be used to combine them all. More complicated WHERE
clauses (including a mixture of AND and OR usage) should be built directly.
(default: "OR")}

\item{limit}{INT scalar of the maximum number of rows to return  (default
NULL)}

\item{group_by}{CHR vector of columns by which to group (default NULL)}

\item{order_by}{named CHR vector of columns by which to order, with names
matching columns and values indicating whether to sort ascending (default
NULL)}

\item{distinct}{LGL scalar of whether or not to apply the DISTINCT clause to
all match criteria (default FALSE)}

\item{get_all_columns}{LGL scalar of whether to return all columns; will be
set to TRUE automatically if no column names are provided (default FALSE)}

\item{execute}{LGL scalar of whether or not to immediately execute the build
query statement (default TRUE)}

\item{single_column_as_vector}{LGL scalar of whether to return results as a
vector if they consist of only a single column (default TRUE)}

\item{log_ns}{CHR scalar of the logging namespace to use during execution
(default: "db")}
}
\value{
CHR scalar of the constructed query
}
\description{
In most cases, issuing basic SQL queries is made easy by tidyverse compliant
functions such as [dplyr::tbl]. Full interaction with an SQLite database is a
bit more complicated and typically requires [DBI::dbExecute] and writing SQL
directly; several helpers exist for that (e.g. [glue::glue_sql]) but aren't
as friendly or straight forward when writing more complicated actions, and
still require directly writing SQL equivalents, routing through
[DBI::dbQuoteIdentifier] and [DBI::dbQuoteLiteral] to prevent SQL injection
attacks.
}
\details{
This function is intended to ease that by taking care of most of the
associated logic and enabling routing through other functions, or picking up
arguments from within other function calls.
}
