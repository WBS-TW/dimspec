% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NIST_import_routines.R
\name{add_rdkit_aliases}
\alias{add_rdkit_aliases}
\title{Add fragment or compound aliases generated by RDKit functions}
\usage{
add_rdkit_aliases(
  identifiers,
  alias_category = c("compounds", "fragments"),
  compound_aliases_table = "compound_aliases",
  fragment_aliases_table = "fragment_aliases",
  inchi_prefix = "InChI=1S/",
  rdkit_name = ifelse(exists("PYENV_NAME"), PYENV_NAME, "rdkit"),
  rdkit_ref = ifelse(exists("PYENV_REF"), PYENV_REF, "rdk"),
  rdkit_ns = "rdk",
  rdkit_make_if_not = TRUE,
  rdkit_aliases = c("inchi", "inchikey"),
  mol_to_prefix = "MolTo",
  mol_from_prefix = "MolFrom",
  type = "smiles",
  as_object = TRUE,
  db_conn = con,
  log_ns = "rdk"
)
}
\arguments{
\item{identifiers}{CHR vector of machine readable notations in `type` format}

\item{alias_category}{CHR scalar, one of "compounds" or "fragments" to
determine where in the database to store the resulting aliases (default:
"compounds")}

\item{compound_aliases_table}{CHR scalar name of the database table holding
compound aliases (default: "compound_aliases")}

\item{fragment_aliases_table}{CHR scalar name of the database table holding
fragment aliases (default: "fragment_aliases")}

\item{inchi_prefix}{CHR scalar prefix for the InChI code to use, if InChI is
requested as part of `rdkit_aliases`}

\item{rdkit_name}{CHR scalar name of the python environment at which RDKit is
installed (default: is the session variable PYENV_NAME or "rdkit")}

\item{rdkit_ref}{CHR scalar name of the R pointer object to RDKit (default:
is the session variable PYENV_REF or "rdk")}

\item{rdkit_ns}{CHR scalar name of the logging namespace to use (default:
"rdk"); will be ignored if logging is off}

\item{rdkit_make_if_not}{LGL scalar of whether to create an RDKit environment
if it does not exist (default: TRUE)}

\item{rdkit_aliases}{CHR vector of machine-readable aliases to generate,
which must be recognizeable as names in the RDKit namespace when prefixed
by `mol_to_prefix` (default: c("inchi", "inchikey")); these are not case
sensitive}

\item{mol_to_prefix}{CHR scalar of the prefix identifying alias creation
functions, which must be recognizeable as names in the RDKit namespace when
suffixed by `rdkit_aliases` (default: "MolTo"); this is not case sensitive}

\item{mol_from_prefix}{CHR scalar of the prefix identifying molecule
expression creation functions, which must be recognizeable as names in the
RDKit namespace when suffixed by `type` (default: "MolFrom"); this is not
case sensitive}

\item{type}{CHR scalar indicating the type of `identifiers` to be converted
to molecule notation (default: "smiles"); this is not case sensitive}

\item{as_object}{LGL scalar indicating whether to return the alias list to
the session as an object (default: TRUE) or write aliases to the database
(FALSE)}

\item{db_conn}{connection object (default: con)}

\item{log_ns}{CHR scalar of the logging namespace to use (default: "db")}
}
\value{
If `as_object` == TRUE, a data.frame of unpacked spectra, otherwise
  no return and a database insertion will be performed
}
\description{
Aliases are stored for both compounds and fragments within the database to
facilitate search and unambiguous identification. Given one molecular
structure notation (SMILES is preferred), other machine-readable expressions
can be generated quickly. Requested aliases as provided to `rdkit_aliases`
will be prefixed by `mol_to_prefix` and checked against the namespace of
available functions in RDKit and the correct functions automatically
assigned.
}
\note{
It is not recommended to change the defaults here unless you are
  familiar with the naming conventions of RDKit.

Requires both INFORMATICS and USE_RDKIT set to TRUE in the session and
  a valid installation of the RDKIT python environment to function.

See the [RDKit Documentation](https://rdkit.org/docs/index.html) for
  more details.
}
