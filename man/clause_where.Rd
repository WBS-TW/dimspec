% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_generator.R
\name{clause_where}
\alias{clause_where}
\title{Build a WHERE clause for SQL statements}
\usage{
clause_where(ANSI(), "example", list(foo = "bar", cat = "dog"))
clause_where(ANSI(), "example", list(foo = list(values = "bar", like = TRUE)))
clause_where(ANSI(), "example", list(foo = list(values = "bar", exclude = TRUE)))
}
\arguments{
\item{db_conn}{existing connection object (e.g. of class "SQLiteConnection")}

\item{table_names}{CHR vector of tables to search}

\item{match_criteria}{LIST of matching criteria with names matching columns
against which to apply. In the simplest case, a direct value is given to
the name (e.g. `list(last_name = "Smith")`) for single matches. All match
criteria must be their own list item. Values can also be provided as a
nested list for more complicated WHERE clauses with names `values`,
`exclude`, and `like` that will be recognized. `values` should be the
actual search criteria, and if a vector of length greater than one is
specified, the WHERE clause becomes an IN clause. `exclude` (LGL scalar)
determines whether to apply the NOT operator. `like` (LGL scalar)
determines whether this is an equality, list, or similarity. To reverse the
example above by issuing a NOT statement, use `list(last_name = list(values
= "Smith", exclude = TRUE))`, or to look for all records LIKE (or NOT LIKE)
"Smith", set this as `list(last_name = list(values = "Smith", exclude =
FALSE, like = TRUE))`}

\item{case_sensitive}{LGL scalar of whether to match on a case sensitive
basis (the default TRUE searches for values as-provided) or whether to
coerce value matches by upper, lower, sentence, and title case matches}

\item{and_or}{LGL scalar of whether to use "AND" or "OR" for multiple
criteria, which will be used to combine them all. More complicated WHERE
clauses (including a mixture of AND and OR usage) should be built directly.
(default: "OR")}
}
\value{
CHR scalar of the constructed where clause for an SQL statement
}
\description{
Properly escaping SQL to prevent injection attacks can be difficult with more
complicated queries. This clause constructor is intended to be specific to
the WHERE clause of SELECT to UPDATE statements. The majority of construction
is achieved with the `match_criteria` parameter, which should always be a
list with names for the columns to appear in the WHERE clause. A variety of
convenience is built in, from simple comparisons to more complicated ones
including negation and similarity (see the description for argument
`match_criteria`).
}
