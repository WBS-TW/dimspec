% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_comm.R
\name{check_for_value}
\alias{check_for_value}
\title{Check for a value in a database table}
\usage{
con2 <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
alphabet <- dplyr::tibble(lower = letters, upper = LETTERS)
dplyr::copy_to(con2, alphabet)
check_for_value("A", "alphabet", "upper", db_conn = con2)
check_for_value("A", "alphabet", "lower", db_conn = con2)
check_for_value(letters[1:10], "alphabet", "lower", db_conn = con2)
DBI::dbDisconnect(con2)
rm(con2)
}
\arguments{
\item{values}{CHR vector of the values to search}

\item{db_table}{CHR scalar of the database table to search}

\item{db_column}{CHR scalar of the column to search}

\item{case_sensitive}{LGL scalar of whether to match on a case sensitive
basis (the default TRUE searches for values as-provided) or whether to
coerce value matches by upper, lower, sentence, and title case matches}

\item{db_conn}{connection object (default: con)}

\item{fuzzy}{LGL scalar of whether to do a "fuzzy" match in the sense that
values provided are wrapped in an SQL "LIKE '%value%'" clause; overrides
the `case_sensitive` setting if TRUE (default: FALSE).}
}
\value{
LIST of length 1-2 containing "exists" as a LGL scalar for whether
  the values were found, and "values" containing the result of the database
  call, a data.frame object containing matching rows or NULL if exists ==
  FALSE.
}
\description{
This convenience function simply checks whether a value exists in the
distinct values of a given column. Only one column may be searched at a time;
serialize it in other code to check multiple columns. It leverages the
flexibility of [build_db_action] to do the searching. The `values` parameter
will be fed directly and can accept the nested list structure defined in
[clause_where] for exclusions and like clauses.
}
