% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny_helpers.R
\name{dt_formatted}
\alias{dt_formatted}
\title{Easily format multiple DT objects in a shiny project in the same manner}
\usage{
dt_formatted(
  dataframe,
  show_rownames = FALSE,
  hide_cols = NULL,
  center_cols = NULL,
  narrow_cols = NULL,
  narrow_col_width = "5\%",
  medium_cols = NULL,
  medium_col_width = "10\%",
  large_cols = NULL,
  large_col_width = "15\%",
  truncate_cols = NULL,
  truncate_width = 20,
  date_cols = NULL,
  date_col_width = "10\%",
  selection_mode = "single",
  callback = NULL,
  color_by_column = NULL,
  names_to = "title",
  filter_at = "top",
  chr_to_factor = TRUE,
  page_length = 10,
  page_length_menu = c(10, 25, 50),
  ...
)
}
\arguments{
\item{dataframe}{data.frame to be converted to a DT::datatable object}

\item{hide_cols}{CHR vector of column names to hide}

\item{center_cols}{CHR vector of column names to center}

\item{narrow_cols}{CHR vector of column names to make `narrow_col_width` wide}

\item{narrow_col_width}{CHR scalar defining column width (default: "5%")}

\item{medium_cols}{CHR vector of column names to make `medium_col_width` wide}

\item{medium_col_width}{CHR scalar defining column width (default: "10%")}

\item{large_cols}{CHR vector of column names to make `large_col_width` wide}

\item{large_col_width}{CHR scalar defining column width (default: "15%")}

\item{truncate_cols}{CHR vector of column names to truncate}

\item{truncate_width}{INT scalar of the position at which to truncate}

\item{date_cols}{CHR vector of column names identifying dates}

\item{date_col_width}{CHR scalar defining column width (default: "10%")}

\item{selection_mode}{CHR scalar of the DT selection mode (default: "single")}

\item{callback}{JS custom callback to apply to the datatable widget}

\item{color_by_column}{CHR scalar of the column name by which to color rows}

\item{names_to}{CHR scalar of the name formatting modification to apply, as
one of the options available in the `stringr` package (default: "title" to
apply `stringr::str_to_title`)}

\item{filter_at}{CHR scalar of the position for the column filter as
understood by `DT::datatable(..., filter = filter_at)`. (default: "top")}

\item{chr_to_factor}{BOOL scalar for whether or not to automatically convert
character columns to factor columns (default: TRUE)}

\item{...}{other named arguments to be passed to `DT::datatable`}
}
\value{
DT::datatable object formatted as requested
}
\description{
This serves solely to reduce the amount of options fed into `DT::datatable`
by providing common defaults and transparent options. Parameters largely do
exactly what they say and will create a list `column_defs` suitable for use
as `datatable(... options = list(columnDefs = column_defs)`. Leave NULL to
ignore any aspect.
}
\note{
Truncation applies a JS function to retain the underlying information
  as a hover tooltip and truncates using ellipses.

Column name formatting relies on being able to parse `names_to` as a
  valid function of the form `sprintf("str_to_%s", names_to)`; currently
  recognized options include "lower", "upper", "title", and "sentence".

To apply a custom format, define these parameters as a list (e.g.
  "dt_format_options") and pass it, along with your dataframe, as
  do.call("dt_formatted", c(dataframe = df, dt_format_options))
}
\examples{

}
