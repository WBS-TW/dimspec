% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env_logger.R, R/logger_functions.R
\name{log_as_dataframe}
\alias{log_as_dataframe}
\title{Pull a log file into an R object}
\usage{
log_as_dataframe("log.txt")

log_as_dataframe("log.txt")
}
\arguments{
\item{file}{CHR scalar file path to a log file (default NULL is translated as
"log.txt")}

\item{last_n}{INT scalar of the last 'n' log entries to read.}

\item{condense}{LGL scalar of whether to nest the resulting tibble by the
nearest second.}

\item{regex_remove}{CHR scalar regular expression of characters to REMOVE
from log messages via [stringr::str_remove_all]}

\item{regex_split}{CHR scalar regular expression of characters used to split
the log entry into columns from log messages via [tidyr::separate]}

\item{df_titles}{CHR vector of headers for the resulting data frame, passed
as the "into" argument of [tidyr::separate]}
}
\value{
tibble with one row per log entry (or groups)

tibble with one row per log entry (or groups)
}
\description{
Log messages generated by logger with anything other than the standard
formatting options can have multiple formatting tags to display in the R
console. These "junk up" any resulting object. If you want to read it
directly in the console and preserve formatting, call [read_log] with the
default `as_object` argument (FALSE). For deeper inspection, a data frame
works well, provided the formatting matches up. In `env_logger.R` there is an
option to set formatting layouts. In addition to setting formatting layouts,
generate regex strings matching the desired format - `log_remove_color` will
remove the colors (the majority should be caught by the string provided as
the default in this package) and `log_split_column` will split the lines in
your logging file into discrete categories named by `df_titles`.

Log messages generated by logger with anything other than the standard
formatting options can have multiple formatting tags to display in the R
console. These "junk up" any resulting object. If you want to read it
directly in the console and preserve formatting, call [read_log] with the
default `as_object` argument (FALSE). For deeper inspection, a data frame
works well, provided the formatting matches up. In `env_logger.R` there is an
option to set formatting layouts. In addition to setting formatting layouts,
generate regex strings matching the desired format - `log_remove_color` will
remove the colors (the majority should be caught by the string provided as
the default in this package) and `log_split_column` will split the lines in
your logging file into discrete categories named by `df_titles`.
}
\details{
This will attempt to fail gracefully.

This will attempt to fail gracefully.
}
\note{
If "time" is included and `condense` == TRUE, the log messages in the
  resulting tibble will nested to the nearest second.

If "status" is included it will be a factor with levels including the
  valid statuses from logger (see [logger::log_levels]).

Use care to develop `regex_split` in order to split the log entries
  into the appropriate columns as defined by `df_titles`; extra
  values will be merged into the messages column.

If "time" is included and `condense` == TRUE, the log messages in the
  resulting tibble will nested to the nearest second.

If "status" is included it will be a factor with levels including the
  valid statuses from logger (see [logger::log_levels]).

Use care to develop `regex_split` in order to split the log entries
  into the appropriate columns as defined by `df_titles`; extra
  values will be merged into the messages column.
}
