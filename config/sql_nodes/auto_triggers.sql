DROP TRIGGER IF EXISTS trigger_additive_aliases_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_additive_aliases_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'additive_aliases' */ AFTER INSERT ON additive_aliases FOR EACH ROW WHEN NEW.additive_id NOT IN (SELECT id FROM norm_additives) BEGIN INSERT OR IGNORE INTO norm_additives (name) VALUES (iif(NEW.additive_id IN (select id FROM norm_additives), (SELECT name FROM norm_additives LIMIT 1), NEW.additive_id)); UPDATE additive_aliases SET additive_id = (iif(NEW.additive_id IN (SELECT id FROM norm_additives), NEW.additive_id, (SELECT id FROM norm_additives WHERE name = NEW.additive_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_additive_aliases_after_update; CREATE TRIGGER IF NOT EXISTS trigger_additive_aliases_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'additive_aliases' */ AFTER UPDATE ON additive_aliases FOR EACH ROW WHEN NEW.additive_id NOT IN (SELECT id FROM norm_additives) BEGIN INSERT OR IGNORE INTO norm_additives (name) VALUES (iif(NEW.additive_id IN (select id FROM norm_additives), (SELECT name FROM norm_additives LIMIT 1), NEW.additive_id)); UPDATE additive_aliases SET additive_id = (iif(NEW.additive_id IN (SELECT id FROM norm_additives), NEW.additive_id, (SELECT id FROM norm_additives WHERE name = NEW.additive_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_chromatography_descriptions_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_chromatography_descriptions_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'chromatography_descriptions' */ AFTER INSERT ON chromatography_descriptions FOR EACH ROW WHEN NEW.column_chemistry_id NOT IN (SELECT id FROM norm_column_chemistries) OR NEW.chromatography_types_id NOT IN (SELECT id FROM norm_chromatography_types) OR NEW.column_position_id NOT IN (SELECT id FROM norm_column_positions) OR NEW.system_vendor_id NOT IN (SELECT id FROM norm_vendors) OR NEW.column_vendor_id NOT IN (SELECT id FROM norm_vendors) BEGIN INSERT OR IGNORE INTO norm_column_chemistries (name) VALUES (iif(NEW.column_chemistry_id IN (select id FROM norm_column_chemistries), (SELECT name FROM norm_column_chemistries LIMIT 1), NEW.column_chemistry_id)); INSERT OR IGNORE INTO norm_chromatography_types (name) VALUES (iif(NEW.chromatography_types_id IN (select id FROM norm_chromatography_types), (SELECT name FROM norm_chromatography_types LIMIT 1), NEW.chromatography_types_id)); INSERT OR IGNORE INTO norm_column_positions (name) VALUES (iif(NEW.column_position_id IN (select id FROM norm_column_positions), (SELECT name FROM norm_column_positions LIMIT 1), NEW.column_position_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.system_vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.system_vendor_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.column_vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.column_vendor_id)); UPDATE chromatography_descriptions SET column_chemistry_id = (iif(NEW.column_chemistry_id IN (SELECT id FROM norm_column_chemistries), NEW.column_chemistry_id, (SELECT id FROM norm_column_chemistries WHERE name = NEW.column_chemistry_id))), chromatography_types_id = (iif(NEW.chromatography_types_id IN (SELECT id FROM norm_chromatography_types), NEW.chromatography_types_id, (SELECT id FROM norm_chromatography_types WHERE name = NEW.chromatography_types_id))), column_position_id = (iif(NEW.column_position_id IN (SELECT id FROM norm_column_positions), NEW.column_position_id, (SELECT id FROM norm_column_positions WHERE name = NEW.column_position_id))), system_vendor_id = (iif(NEW.system_vendor_id IN (SELECT id FROM norm_vendors), NEW.system_vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.system_vendor_id))), column_vendor_id = (iif(NEW.column_vendor_id IN (SELECT id FROM norm_vendors), NEW.column_vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.column_vendor_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_chromatography_descriptions_after_update; CREATE TRIGGER IF NOT EXISTS trigger_chromatography_descriptions_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'chromatography_descriptions' */ AFTER UPDATE ON chromatography_descriptions FOR EACH ROW WHEN NEW.column_chemistry_id NOT IN (SELECT id FROM norm_column_chemistries) OR NEW.chromatography_types_id NOT IN (SELECT id FROM norm_chromatography_types) OR NEW.column_position_id NOT IN (SELECT id FROM norm_column_positions) OR NEW.system_vendor_id NOT IN (SELECT id FROM norm_vendors) OR NEW.column_vendor_id NOT IN (SELECT id FROM norm_vendors) BEGIN INSERT OR IGNORE INTO norm_column_chemistries (name) VALUES (iif(NEW.column_chemistry_id IN (select id FROM norm_column_chemistries), (SELECT name FROM norm_column_chemistries LIMIT 1), NEW.column_chemistry_id)); INSERT OR IGNORE INTO norm_chromatography_types (name) VALUES (iif(NEW.chromatography_types_id IN (select id FROM norm_chromatography_types), (SELECT name FROM norm_chromatography_types LIMIT 1), NEW.chromatography_types_id)); INSERT OR IGNORE INTO norm_column_positions (name) VALUES (iif(NEW.column_position_id IN (select id FROM norm_column_positions), (SELECT name FROM norm_column_positions LIMIT 1), NEW.column_position_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.system_vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.system_vendor_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.column_vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.column_vendor_id)); UPDATE chromatography_descriptions SET column_chemistry_id = (iif(NEW.column_chemistry_id IN (SELECT id FROM norm_column_chemistries), NEW.column_chemistry_id, (SELECT id FROM norm_column_chemistries WHERE name = NEW.column_chemistry_id))), chromatography_types_id = (iif(NEW.chromatography_types_id IN (SELECT id FROM norm_chromatography_types), NEW.chromatography_types_id, (SELECT id FROM norm_chromatography_types WHERE name = NEW.chromatography_types_id))), column_position_id = (iif(NEW.column_position_id IN (SELECT id FROM norm_column_positions), NEW.column_position_id, (SELECT id FROM norm_column_positions WHERE name = NEW.column_position_id))), system_vendor_id = (iif(NEW.system_vendor_id IN (SELECT id FROM norm_vendors), NEW.system_vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.system_vendor_id))), column_vendor_id = (iif(NEW.column_vendor_id IN (SELECT id FROM norm_vendors), NEW.column_vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.column_vendor_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_compound_aliases_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_compound_aliases_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'compound_aliases' */ AFTER INSERT ON compound_aliases FOR EACH ROW WHEN NEW.alias_type NOT IN (SELECT id FROM norm_analyte_alias_references) BEGIN INSERT OR IGNORE INTO norm_analyte_alias_references (name) VALUES (iif(NEW.alias_type IN (select id FROM norm_analyte_alias_references), (SELECT name FROM norm_analyte_alias_references LIMIT 1), NEW.alias_type)); UPDATE compound_aliases SET alias_type = (iif(NEW.alias_type IN (SELECT id FROM norm_analyte_alias_references), NEW.alias_type, (SELECT id FROM norm_analyte_alias_references WHERE name = NEW.alias_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_compound_aliases_after_update; CREATE TRIGGER IF NOT EXISTS trigger_compound_aliases_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'compound_aliases' */ AFTER UPDATE ON compound_aliases FOR EACH ROW WHEN NEW.alias_type NOT IN (SELECT id FROM norm_analyte_alias_references) BEGIN INSERT OR IGNORE INTO norm_analyte_alias_references (name) VALUES (iif(NEW.alias_type IN (select id FROM norm_analyte_alias_references), (SELECT name FROM norm_analyte_alias_references LIMIT 1), NEW.alias_type)); UPDATE compound_aliases SET alias_type = (iif(NEW.alias_type IN (SELECT id FROM norm_analyte_alias_references), NEW.alias_type, (SELECT id FROM norm_analyte_alias_references WHERE name = NEW.alias_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_compounds_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_compounds_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'compounds' */ AFTER INSERT ON compounds FOR EACH ROW WHEN NEW.source_type NOT IN (SELECT id FROM norm_source_types) BEGIN INSERT OR IGNORE INTO norm_source_types (name) VALUES (iif(NEW.source_type IN (select id FROM norm_source_types), (SELECT name FROM norm_source_types LIMIT 1), NEW.source_type)); UPDATE compounds SET source_type = (iif(NEW.source_type IN (SELECT id FROM norm_source_types), NEW.source_type, (SELECT id FROM norm_source_types WHERE name = NEW.source_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_compounds_after_update; CREATE TRIGGER IF NOT EXISTS trigger_compounds_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'compounds' */ AFTER UPDATE ON compounds FOR EACH ROW WHEN NEW.source_type NOT IN (SELECT id FROM norm_source_types) BEGIN INSERT OR IGNORE INTO norm_source_types (name) VALUES (iif(NEW.source_type IN (select id FROM norm_source_types), (SELECT name FROM norm_source_types LIMIT 1), NEW.source_type)); UPDATE compounds SET source_type = (iif(NEW.source_type IN (SELECT id FROM norm_source_types), NEW.source_type, (SELECT id FROM norm_source_types WHERE name = NEW.source_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_fragment_aliases_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_fragment_aliases_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'fragment_aliases' */ AFTER INSERT ON fragment_aliases FOR EACH ROW WHEN NEW.alias_type NOT IN (SELECT id FROM norm_analyte_alias_references) BEGIN INSERT OR IGNORE INTO norm_analyte_alias_references (name) VALUES (iif(NEW.alias_type IN (select id FROM norm_analyte_alias_references), (SELECT name FROM norm_analyte_alias_references LIMIT 1), NEW.alias_type)); UPDATE fragment_aliases SET alias_type = (iif(NEW.alias_type IN (SELECT id FROM norm_analyte_alias_references), NEW.alias_type, (SELECT id FROM norm_analyte_alias_references WHERE name = NEW.alias_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_fragment_aliases_after_update; CREATE TRIGGER IF NOT EXISTS trigger_fragment_aliases_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'fragment_aliases' */ AFTER UPDATE ON fragment_aliases FOR EACH ROW WHEN NEW.alias_type NOT IN (SELECT id FROM norm_analyte_alias_references) BEGIN INSERT OR IGNORE INTO norm_analyte_alias_references (name) VALUES (iif(NEW.alias_type IN (select id FROM norm_analyte_alias_references), (SELECT name FROM norm_analyte_alias_references LIMIT 1), NEW.alias_type)); UPDATE fragment_aliases SET alias_type = (iif(NEW.alias_type IN (SELECT id FROM norm_analyte_alias_references), NEW.alias_type, (SELECT id FROM norm_analyte_alias_references WHERE name = NEW.alias_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_fragment_sources_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_fragment_sources_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'fragment_sources' */ AFTER INSERT ON fragment_sources FOR EACH ROW WHEN NEW.generated_by NOT IN (SELECT id FROM norm_generation_type) BEGIN INSERT OR IGNORE INTO norm_generation_type (name) VALUES (iif(NEW.generated_by IN (select id FROM norm_generation_type), (SELECT name FROM norm_generation_type LIMIT 1), NEW.generated_by)); UPDATE fragment_sources SET generated_by = (iif(NEW.generated_by IN (SELECT id FROM norm_generation_type), NEW.generated_by, (SELECT id FROM norm_generation_type WHERE name = NEW.generated_by))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_fragment_sources_after_update; CREATE TRIGGER IF NOT EXISTS trigger_fragment_sources_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'fragment_sources' */ AFTER UPDATE ON fragment_sources FOR EACH ROW WHEN NEW.generated_by NOT IN (SELECT id FROM norm_generation_type) BEGIN INSERT OR IGNORE INTO norm_generation_type (name) VALUES (iif(NEW.generated_by IN (select id FROM norm_generation_type), (SELECT name FROM norm_generation_type LIMIT 1), NEW.generated_by)); UPDATE fragment_sources SET generated_by = (iif(NEW.generated_by IN (SELECT id FROM norm_generation_type), NEW.generated_by, (SELECT id FROM norm_generation_type WHERE name = NEW.generated_by))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_logs_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_logs_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'logs' */ AFTER INSERT ON logs FOR EACH ROW WHEN NEW.effect NOT IN (SELECT id FROM norm_log_effect) OR NEW.executed_from NOT IN (SELECT id FROM norm_log_executed_from) BEGIN INSERT OR IGNORE INTO norm_log_effect (name) VALUES (iif(NEW.effect IN (select id FROM norm_log_effect), (SELECT name FROM norm_log_effect LIMIT 1), NEW.effect)); INSERT OR IGNORE INTO norm_log_executed_from (name) VALUES (iif(NEW.executed_from IN (select id FROM norm_log_executed_from), (SELECT name FROM norm_log_executed_from LIMIT 1), NEW.executed_from)); UPDATE logs SET effect = (iif(NEW.effect IN (SELECT id FROM norm_log_effect), NEW.effect, (SELECT id FROM norm_log_effect WHERE name = NEW.effect))), executed_from = (iif(NEW.executed_from IN (SELECT id FROM norm_log_executed_from), NEW.executed_from, (SELECT id FROM norm_log_executed_from WHERE name = NEW.executed_from))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_logs_after_update; CREATE TRIGGER IF NOT EXISTS trigger_logs_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'logs' */ AFTER UPDATE ON logs FOR EACH ROW WHEN NEW.effect NOT IN (SELECT id FROM norm_log_effect) OR NEW.executed_from NOT IN (SELECT id FROM norm_log_executed_from) BEGIN INSERT OR IGNORE INTO norm_log_effect (name) VALUES (iif(NEW.effect IN (select id FROM norm_log_effect), (SELECT name FROM norm_log_effect LIMIT 1), NEW.effect)); INSERT OR IGNORE INTO norm_log_executed_from (name) VALUES (iif(NEW.executed_from IN (select id FROM norm_log_executed_from), (SELECT name FROM norm_log_executed_from LIMIT 1), NEW.executed_from)); UPDATE logs SET effect = (iif(NEW.effect IN (SELECT id FROM norm_log_effect), NEW.effect, (SELECT id FROM norm_log_effect WHERE name = NEW.effect))), executed_from = (iif(NEW.executed_from IN (SELECT id FROM norm_log_executed_from), NEW.executed_from, (SELECT id FROM norm_log_executed_from WHERE name = NEW.executed_from))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_mobile_phases_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_mobile_phases_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'mobile_phases' */ AFTER INSERT ON mobile_phases FOR EACH ROW WHEN NEW.flow_units NOT IN (SELECT id FROM norm_flow_units) OR NEW.duration_units NOT IN (SELECT id FROM norm_duration_units) BEGIN INSERT OR IGNORE INTO norm_flow_units (name) VALUES (iif(NEW.flow_units IN (select id FROM norm_flow_units), (SELECT name FROM norm_flow_units LIMIT 1), NEW.flow_units)); INSERT OR IGNORE INTO norm_duration_units (name) VALUES (iif(NEW.duration_units IN (select id FROM norm_duration_units), (SELECT name FROM norm_duration_units LIMIT 1), NEW.duration_units)); UPDATE mobile_phases SET flow_units = (iif(NEW.flow_units IN (SELECT id FROM norm_flow_units), NEW.flow_units, (SELECT id FROM norm_flow_units WHERE name = NEW.flow_units))), duration_units = (iif(NEW.duration_units IN (SELECT id FROM norm_duration_units), NEW.duration_units, (SELECT id FROM norm_duration_units WHERE name = NEW.duration_units))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_mobile_phases_after_update; CREATE TRIGGER IF NOT EXISTS trigger_mobile_phases_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'mobile_phases' */ AFTER UPDATE ON mobile_phases FOR EACH ROW WHEN NEW.flow_units NOT IN (SELECT id FROM norm_flow_units) OR NEW.duration_units NOT IN (SELECT id FROM norm_duration_units) BEGIN INSERT OR IGNORE INTO norm_flow_units (name) VALUES (iif(NEW.flow_units IN (select id FROM norm_flow_units), (SELECT name FROM norm_flow_units LIMIT 1), NEW.flow_units)); INSERT OR IGNORE INTO norm_duration_units (name) VALUES (iif(NEW.duration_units IN (select id FROM norm_duration_units), (SELECT name FROM norm_duration_units LIMIT 1), NEW.duration_units)); UPDATE mobile_phases SET flow_units = (iif(NEW.flow_units IN (SELECT id FROM norm_flow_units), NEW.flow_units, (SELECT id FROM norm_flow_units WHERE name = NEW.flow_units))), duration_units = (iif(NEW.duration_units IN (SELECT id FROM norm_duration_units), NEW.duration_units, (SELECT id FROM norm_duration_units WHERE name = NEW.duration_units))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_ms_descriptions_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_ms_descriptions_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'ms_descriptions' */ AFTER INSERT ON ms_descriptions FOR EACH ROW WHEN NEW.ms_types_id NOT IN (SELECT id FROM norm_ms_types) OR NEW.vendor_id NOT IN (SELECT id FROM norm_vendors) BEGIN INSERT OR IGNORE INTO norm_ms_types (name) VALUES (iif(NEW.ms_types_id IN (select id FROM norm_ms_types), (SELECT name FROM norm_ms_types LIMIT 1), NEW.ms_types_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.vendor_id)); UPDATE ms_descriptions SET ms_types_id = (iif(NEW.ms_types_id IN (SELECT id FROM norm_ms_types), NEW.ms_types_id, (SELECT id FROM norm_ms_types WHERE name = NEW.ms_types_id))), vendor_id = (iif(NEW.vendor_id IN (SELECT id FROM norm_vendors), NEW.vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.vendor_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_ms_descriptions_after_update; CREATE TRIGGER IF NOT EXISTS trigger_ms_descriptions_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'ms_descriptions' */ AFTER UPDATE ON ms_descriptions FOR EACH ROW WHEN NEW.ms_types_id NOT IN (SELECT id FROM norm_ms_types) OR NEW.vendor_id NOT IN (SELECT id FROM norm_vendors) BEGIN INSERT OR IGNORE INTO norm_ms_types (name) VALUES (iif(NEW.ms_types_id IN (select id FROM norm_ms_types), (SELECT name FROM norm_ms_types LIMIT 1), NEW.ms_types_id)); INSERT OR IGNORE INTO norm_vendors (name) VALUES (iif(NEW.vendor_id IN (select id FROM norm_vendors), (SELECT name FROM norm_vendors LIMIT 1), NEW.vendor_id)); UPDATE ms_descriptions SET ms_types_id = (iif(NEW.ms_types_id IN (SELECT id FROM norm_ms_types), NEW.ms_types_id, (SELECT id FROM norm_ms_types WHERE name = NEW.ms_types_id))), vendor_id = (iif(NEW.vendor_id IN (SELECT id FROM norm_vendors), NEW.vendor_id, (SELECT id FROM norm_vendors WHERE name = NEW.vendor_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_ms_methods_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_ms_methods_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'ms_methods' */ AFTER INSERT ON ms_methods FOR EACH ROW WHEN NEW.ionization NOT IN (SELECT id FROM norm_ionization) OR NEW.voltage_units NOT IN (SELECT id FROM norm_voltage_units) OR NEW.polarity NOT IN (SELECT id FROM norm_polarity_types) OR NEW.ce_desc NOT IN (SELECT id FROM norm_ce_desc) OR NEW.ce_units NOT IN (SELECT id FROM norm_ce_units) OR NEW.fragmentation NOT IN (SELECT id FROM norm_fragmentation_types) OR NEW.ms2_type NOT IN (SELECT id FROM norm_ms_n_types) BEGIN INSERT OR IGNORE INTO norm_ionization (name) VALUES (iif(NEW.ionization IN (select id FROM norm_ionization), (SELECT name FROM norm_ionization LIMIT 1), NEW.ionization)); INSERT OR IGNORE INTO norm_voltage_units (name) VALUES (iif(NEW.voltage_units IN (select id FROM norm_voltage_units), (SELECT name FROM norm_voltage_units LIMIT 1), NEW.voltage_units)); INSERT OR IGNORE INTO norm_polarity_types (name) VALUES (iif(NEW.polarity IN (select id FROM norm_polarity_types), (SELECT name FROM norm_polarity_types LIMIT 1), NEW.polarity)); INSERT OR IGNORE INTO norm_ce_desc (name) VALUES (iif(NEW.ce_desc IN (select id FROM norm_ce_desc), (SELECT name FROM norm_ce_desc LIMIT 1), NEW.ce_desc)); INSERT OR IGNORE INTO norm_ce_units (name) VALUES (iif(NEW.ce_units IN (select id FROM norm_ce_units), (SELECT name FROM norm_ce_units LIMIT 1), NEW.ce_units)); INSERT OR IGNORE INTO norm_fragmentation_types (name) VALUES (iif(NEW.fragmentation IN (select id FROM norm_fragmentation_types), (SELECT name FROM norm_fragmentation_types LIMIT 1), NEW.fragmentation)); INSERT OR IGNORE INTO norm_ms_n_types (name) VALUES (iif(NEW.ms2_type IN (select id FROM norm_ms_n_types), (SELECT name FROM norm_ms_n_types LIMIT 1), NEW.ms2_type)); UPDATE ms_methods SET ionization = (iif(NEW.ionization IN (SELECT id FROM norm_ionization), NEW.ionization, (SELECT id FROM norm_ionization WHERE name = NEW.ionization))), voltage_units = (iif(NEW.voltage_units IN (SELECT id FROM norm_voltage_units), NEW.voltage_units, (SELECT id FROM norm_voltage_units WHERE name = NEW.voltage_units))), polarity = (iif(NEW.polarity IN (SELECT id FROM norm_polarity_types), NEW.polarity, (SELECT id FROM norm_polarity_types WHERE name = NEW.polarity))), ce_desc = (iif(NEW.ce_desc IN (SELECT id FROM norm_ce_desc), NEW.ce_desc, (SELECT id FROM norm_ce_desc WHERE name = NEW.ce_desc))), ce_units = (iif(NEW.ce_units IN (SELECT id FROM norm_ce_units), NEW.ce_units, (SELECT id FROM norm_ce_units WHERE name = NEW.ce_units))), fragmentation = (iif(NEW.fragmentation IN (SELECT id FROM norm_fragmentation_types), NEW.fragmentation, (SELECT id FROM norm_fragmentation_types WHERE name = NEW.fragmentation))), ms2_type = (iif(NEW.ms2_type IN (SELECT id FROM norm_ms_n_types), NEW.ms2_type, (SELECT id FROM norm_ms_n_types WHERE name = NEW.ms2_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_ms_methods_after_update; CREATE TRIGGER IF NOT EXISTS trigger_ms_methods_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'ms_methods' */ AFTER UPDATE ON ms_methods FOR EACH ROW WHEN NEW.ionization NOT IN (SELECT id FROM norm_ionization) OR NEW.voltage_units NOT IN (SELECT id FROM norm_voltage_units) OR NEW.polarity NOT IN (SELECT id FROM norm_polarity_types) OR NEW.ce_desc NOT IN (SELECT id FROM norm_ce_desc) OR NEW.ce_units NOT IN (SELECT id FROM norm_ce_units) OR NEW.fragmentation NOT IN (SELECT id FROM norm_fragmentation_types) OR NEW.ms2_type NOT IN (SELECT id FROM norm_ms_n_types) BEGIN INSERT OR IGNORE INTO norm_ionization (name) VALUES (iif(NEW.ionization IN (select id FROM norm_ionization), (SELECT name FROM norm_ionization LIMIT 1), NEW.ionization)); INSERT OR IGNORE INTO norm_voltage_units (name) VALUES (iif(NEW.voltage_units IN (select id FROM norm_voltage_units), (SELECT name FROM norm_voltage_units LIMIT 1), NEW.voltage_units)); INSERT OR IGNORE INTO norm_polarity_types (name) VALUES (iif(NEW.polarity IN (select id FROM norm_polarity_types), (SELECT name FROM norm_polarity_types LIMIT 1), NEW.polarity)); INSERT OR IGNORE INTO norm_ce_desc (name) VALUES (iif(NEW.ce_desc IN (select id FROM norm_ce_desc), (SELECT name FROM norm_ce_desc LIMIT 1), NEW.ce_desc)); INSERT OR IGNORE INTO norm_ce_units (name) VALUES (iif(NEW.ce_units IN (select id FROM norm_ce_units), (SELECT name FROM norm_ce_units LIMIT 1), NEW.ce_units)); INSERT OR IGNORE INTO norm_fragmentation_types (name) VALUES (iif(NEW.fragmentation IN (select id FROM norm_fragmentation_types), (SELECT name FROM norm_fragmentation_types LIMIT 1), NEW.fragmentation)); INSERT OR IGNORE INTO norm_ms_n_types (name) VALUES (iif(NEW.ms2_type IN (select id FROM norm_ms_n_types), (SELECT name FROM norm_ms_n_types LIMIT 1), NEW.ms2_type)); UPDATE ms_methods SET ionization = (iif(NEW.ionization IN (SELECT id FROM norm_ionization), NEW.ionization, (SELECT id FROM norm_ionization WHERE name = NEW.ionization))), voltage_units = (iif(NEW.voltage_units IN (SELECT id FROM norm_voltage_units), NEW.voltage_units, (SELECT id FROM norm_voltage_units WHERE name = NEW.voltage_units))), polarity = (iif(NEW.polarity IN (SELECT id FROM norm_polarity_types), NEW.polarity, (SELECT id FROM norm_polarity_types WHERE name = NEW.polarity))), ce_desc = (iif(NEW.ce_desc IN (SELECT id FROM norm_ce_desc), NEW.ce_desc, (SELECT id FROM norm_ce_desc WHERE name = NEW.ce_desc))), ce_units = (iif(NEW.ce_units IN (SELECT id FROM norm_ce_units), NEW.ce_units, (SELECT id FROM norm_ce_units WHERE name = NEW.ce_units))), fragmentation = (iif(NEW.fragmentation IN (SELECT id FROM norm_fragmentation_types), NEW.fragmentation, (SELECT id FROM norm_fragmentation_types WHERE name = NEW.fragmentation))), ms2_type = (iif(NEW.ms2_type IN (SELECT id FROM norm_ms_n_types), NEW.ms2_type, (SELECT id FROM norm_ms_n_types WHERE name = NEW.ms2_type))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_peaks_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_peaks_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'peaks' */ AFTER INSERT ON peaks FOR EACH ROW WHEN NEW.ion_state NOT IN (SELECT id FROM norm_ion_states) OR NEW.identification_confidence NOT IN (SELECT id FROM norm_peak_confidence) BEGIN INSERT OR IGNORE INTO norm_ion_states (name) VALUES (iif(NEW.ion_state IN (select id FROM norm_ion_states), (SELECT name FROM norm_ion_states LIMIT 1), NEW.ion_state)); INSERT OR IGNORE INTO norm_peak_confidence (name) VALUES (iif(NEW.identification_confidence IN (select id FROM norm_peak_confidence), (SELECT name FROM norm_peak_confidence LIMIT 1), NEW.identification_confidence)); UPDATE peaks SET ion_state = (iif(NEW.ion_state IN (SELECT id FROM norm_ion_states), NEW.ion_state, (SELECT id FROM norm_ion_states WHERE name = NEW.ion_state))), identification_confidence = (iif(NEW.identification_confidence IN (SELECT id FROM norm_peak_confidence), NEW.identification_confidence, (SELECT id FROM norm_peak_confidence WHERE name = NEW.identification_confidence))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_peaks_after_update; CREATE TRIGGER IF NOT EXISTS trigger_peaks_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'peaks' */ AFTER UPDATE ON peaks FOR EACH ROW WHEN NEW.ion_state NOT IN (SELECT id FROM norm_ion_states) OR NEW.identification_confidence NOT IN (SELECT id FROM norm_peak_confidence) BEGIN INSERT OR IGNORE INTO norm_ion_states (name) VALUES (iif(NEW.ion_state IN (select id FROM norm_ion_states), (SELECT name FROM norm_ion_states LIMIT 1), NEW.ion_state)); INSERT OR IGNORE INTO norm_peak_confidence (name) VALUES (iif(NEW.identification_confidence IN (select id FROM norm_peak_confidence), (SELECT name FROM norm_peak_confidence LIMIT 1), NEW.identification_confidence)); UPDATE peaks SET ion_state = (iif(NEW.ion_state IN (SELECT id FROM norm_ion_states), NEW.ion_state, (SELECT id FROM norm_ion_states WHERE name = NEW.ion_state))), identification_confidence = (iif(NEW.identification_confidence IN (SELECT id FROM norm_peak_confidence), NEW.identification_confidence, (SELECT id FROM norm_peak_confidence WHERE name = NEW.identification_confidence))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_qc_methods_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_qc_methods_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'qc_methods' */ AFTER INSERT ON qc_methods FOR EACH ROW WHEN NEW.name NOT IN (SELECT id FROM norm_qc_methods_name) OR NEW.reference NOT IN (SELECT id FROM norm_qc_methods_reference) BEGIN INSERT OR IGNORE INTO norm_qc_methods_name (name) VALUES (iif(NEW.name IN (select id FROM norm_qc_methods_name), (SELECT name FROM norm_qc_methods_name LIMIT 1), NEW.name)); INSERT OR IGNORE INTO norm_qc_methods_reference (name) VALUES (iif(NEW.reference IN (select id FROM norm_qc_methods_reference), (SELECT name FROM norm_qc_methods_reference LIMIT 1), NEW.reference)); UPDATE qc_methods SET name = (iif(NEW.name IN (SELECT id FROM norm_qc_methods_name), NEW.name, (SELECT id FROM norm_qc_methods_name WHERE name = NEW.name))), reference = (iif(NEW.reference IN (SELECT id FROM norm_qc_methods_reference), NEW.reference, (SELECT id FROM norm_qc_methods_reference WHERE name = NEW.reference))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_qc_methods_after_update; CREATE TRIGGER IF NOT EXISTS trigger_qc_methods_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'qc_methods' */ AFTER UPDATE ON qc_methods FOR EACH ROW WHEN NEW.name NOT IN (SELECT id FROM norm_qc_methods_name) OR NEW.reference NOT IN (SELECT id FROM norm_qc_methods_reference) BEGIN INSERT OR IGNORE INTO norm_qc_methods_name (name) VALUES (iif(NEW.name IN (select id FROM norm_qc_methods_name), (SELECT name FROM norm_qc_methods_name LIMIT 1), NEW.name)); INSERT OR IGNORE INTO norm_qc_methods_reference (name) VALUES (iif(NEW.reference IN (select id FROM norm_qc_methods_reference), (SELECT name FROM norm_qc_methods_reference LIMIT 1), NEW.reference)); UPDATE qc_methods SET name = (iif(NEW.name IN (SELECT id FROM norm_qc_methods_name), NEW.name, (SELECT id FROM norm_qc_methods_name WHERE name = NEW.name))), reference = (iif(NEW.reference IN (SELECT id FROM norm_qc_methods_reference), NEW.reference, (SELECT id FROM norm_qc_methods_reference WHERE name = NEW.reference))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_samples_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_samples_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'samples' */ AFTER INSERT ON samples FOR EACH ROW WHEN NEW.sample_class_id NOT IN (SELECT id FROM norm_sample_classes) OR NEW.generation_type NOT IN (SELECT id FROM norm_generation_type) OR NEW.sample_solvent NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_sample_classes (name) VALUES (iif(NEW.sample_class_id IN (select id FROM norm_sample_classes), (SELECT name FROM norm_sample_classes LIMIT 1), NEW.sample_class_id)); INSERT OR IGNORE INTO norm_generation_type (name) VALUES (iif(NEW.generation_type IN (select id FROM norm_generation_type), (SELECT name FROM norm_generation_type LIMIT 1), NEW.generation_type)); INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.sample_solvent IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.sample_solvent)); UPDATE samples SET sample_class_id = (iif(NEW.sample_class_id IN (SELECT id FROM norm_sample_classes), NEW.sample_class_id, (SELECT id FROM norm_sample_classes WHERE name = NEW.sample_class_id))), generation_type = (iif(NEW.generation_type IN (SELECT id FROM norm_generation_type), NEW.generation_type, (SELECT id FROM norm_generation_type WHERE name = NEW.generation_type))), sample_solvent = (iif(NEW.sample_solvent IN (SELECT id FROM norm_solvents), NEW.sample_solvent, (SELECT id FROM norm_solvents WHERE name = NEW.sample_solvent))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_samples_after_update; CREATE TRIGGER IF NOT EXISTS trigger_samples_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'samples' */ AFTER UPDATE ON samples FOR EACH ROW WHEN NEW.sample_class_id NOT IN (SELECT id FROM norm_sample_classes) OR NEW.generation_type NOT IN (SELECT id FROM norm_generation_type) OR NEW.sample_solvent NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_sample_classes (name) VALUES (iif(NEW.sample_class_id IN (select id FROM norm_sample_classes), (SELECT name FROM norm_sample_classes LIMIT 1), NEW.sample_class_id)); INSERT OR IGNORE INTO norm_generation_type (name) VALUES (iif(NEW.generation_type IN (select id FROM norm_generation_type), (SELECT name FROM norm_generation_type LIMIT 1), NEW.generation_type)); INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.sample_solvent IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.sample_solvent)); UPDATE samples SET sample_class_id = (iif(NEW.sample_class_id IN (SELECT id FROM norm_sample_classes), NEW.sample_class_id, (SELECT id FROM norm_sample_classes WHERE name = NEW.sample_class_id))), generation_type = (iif(NEW.generation_type IN (SELECT id FROM norm_generation_type), NEW.generation_type, (SELECT id FROM norm_generation_type WHERE name = NEW.generation_type))), sample_solvent = (iif(NEW.sample_solvent IN (SELECT id FROM norm_solvents), NEW.sample_solvent, (SELECT id FROM norm_solvents WHERE name = NEW.sample_solvent))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_additives_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_solvent_additives_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'solvent_additives' */ AFTER INSERT ON solvent_additives FOR EACH ROW WHEN NEW.component NOT IN (SELECT id FROM norm_additives) OR NEW.units NOT IN (SELECT id FROM norm_additive_units) BEGIN INSERT OR IGNORE INTO norm_additives (name) VALUES (iif(NEW.component IN (select id FROM norm_additives), (SELECT name FROM norm_additives LIMIT 1), NEW.component)); INSERT OR IGNORE INTO norm_additive_units (name) VALUES (iif(NEW.units IN (select id FROM norm_additive_units), (SELECT name FROM norm_additive_units LIMIT 1), NEW.units)); UPDATE solvent_additives SET component = (iif(NEW.component IN (SELECT id FROM norm_additives), NEW.component, (SELECT id FROM norm_additives WHERE name = NEW.component))), units = (iif(NEW.units IN (SELECT id FROM norm_additive_units), NEW.units, (SELECT id FROM norm_additive_units WHERE name = NEW.units))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_additives_after_update; CREATE TRIGGER IF NOT EXISTS trigger_solvent_additives_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'solvent_additives' */ AFTER UPDATE ON solvent_additives FOR EACH ROW WHEN NEW.component NOT IN (SELECT id FROM norm_additives) OR NEW.units NOT IN (SELECT id FROM norm_additive_units) BEGIN INSERT OR IGNORE INTO norm_additives (name) VALUES (iif(NEW.component IN (select id FROM norm_additives), (SELECT name FROM norm_additives LIMIT 1), NEW.component)); INSERT OR IGNORE INTO norm_additive_units (name) VALUES (iif(NEW.units IN (select id FROM norm_additive_units), (SELECT name FROM norm_additive_units LIMIT 1), NEW.units)); UPDATE solvent_additives SET component = (iif(NEW.component IN (SELECT id FROM norm_additives), NEW.component, (SELECT id FROM norm_additives WHERE name = NEW.component))), units = (iif(NEW.units IN (SELECT id FROM norm_additive_units), NEW.units, (SELECT id FROM norm_additive_units WHERE name = NEW.units))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_aliases_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_solvent_aliases_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'solvent_aliases' */ AFTER INSERT ON solvent_aliases FOR EACH ROW WHEN NEW.solvent_id NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.solvent_id IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.solvent_id)); UPDATE solvent_aliases SET solvent_id = (iif(NEW.solvent_id IN (SELECT id FROM norm_solvents), NEW.solvent_id, (SELECT id FROM norm_solvents WHERE name = NEW.solvent_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_aliases_after_update; CREATE TRIGGER IF NOT EXISTS trigger_solvent_aliases_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'solvent_aliases' */ AFTER UPDATE ON solvent_aliases FOR EACH ROW WHEN NEW.solvent_id NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.solvent_id IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.solvent_id)); UPDATE solvent_aliases SET solvent_id = (iif(NEW.solvent_id IN (SELECT id FROM norm_solvents), NEW.solvent_id, (SELECT id FROM norm_solvents WHERE name = NEW.solvent_id))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_mixes_after_insert; CREATE TRIGGER IF NOT EXISTS trigger_solvent_mixes_after_insert /* [autogenerated] Trigger to control normalization compliance after insert actions on table 'solvent_mixes' */ AFTER INSERT ON solvent_mixes FOR EACH ROW WHEN NEW.component NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.component IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.component)); UPDATE solvent_mixes SET component = (iif(NEW.component IN (SELECT id FROM norm_solvents), NEW.component, (SELECT id FROM norm_solvents WHERE name = NEW.component))) WHERE ROWID = NEW.ROWID; END;
DROP TRIGGER IF EXISTS trigger_solvent_mixes_after_update; CREATE TRIGGER IF NOT EXISTS trigger_solvent_mixes_after_update /* [autogenerated] Trigger to control normalization compliance after update actions on table 'solvent_mixes' */ AFTER UPDATE ON solvent_mixes FOR EACH ROW WHEN NEW.component NOT IN (SELECT id FROM norm_solvents) BEGIN INSERT OR IGNORE INTO norm_solvents (name) VALUES (iif(NEW.component IN (select id FROM norm_solvents), (SELECT name FROM norm_solvents LIMIT 1), NEW.component)); UPDATE solvent_mixes SET component = (iif(NEW.component IN (SELECT id FROM norm_solvents), NEW.component, (SELECT id FROM norm_solvents WHERE name = NEW.component))) WHERE ROWID = NEW.ROWID; END;